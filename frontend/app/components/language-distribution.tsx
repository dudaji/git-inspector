/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/VQxjcbpWhA2
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
"use client";

import React from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/app/components/ui/card";
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/app/components/ui/chart";
import { Label, PieChart, Pie } from "recharts";
import { Colors, getHexColour } from "github-linguist-colours";

export function LanguageDistribution({
  languages,
}: {
  languages: Record<string, number>;
}) {
  const chartData = Object.entries(languages).map(
    ([language, bytes]: [language: string, bytes: number]) => ({
      language,
      bytes,
      fill: getHexColour(language as Colors),
    }),
  );
  const chartConfig = {
    languages: {
      label: "Bytes",
    },
  };
  const totalLanguageBytes = React.useMemo(() => {
    return chartData.reduce((acc, curr) => acc + curr.bytes, 0);
  }, [chartData]);
  return (
    <Card className="flex flex-col">
      <CardHeader className="items-center pb-0">
        <CardTitle>Programming Languages</CardTitle>
        <CardDescription>Byte Counts</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ChartContainer
          config={chartConfig}
          className="mx-auto aspect-square max-h-[250px]"
        >
          <PieChart>
            <ChartTooltip
              cursor={false}
              content={<ChartTooltipContent hideLabel />}
            />
            <Pie
              data={chartData}
              dataKey="bytes"
              nameKey="language"
              innerRadius={60}
              strokeWidth={5}
            >
              <Label
                content={({ viewBox }) => {
                  if (viewBox && "cx" in viewBox && "cy" in viewBox) {
                    return (
                      <text
                        x={viewBox.cx}
                        y={viewBox.cy}
                        textAnchor="middle"
                        dominantBaseline="middle"
                      >
                        <tspan
                          x={viewBox.cx}
                          y={viewBox.cy}
                          className="fill-foreground text-3xl font-bold"
                        >
                          {totalLanguageBytes.toLocaleString()}
                        </tspan>
                        <tspan
                          x={viewBox.cx}
                          y={(viewBox.cy || 0) + 24}
                          className="fill-muted-foreground"
                        >
                          Total Bytes
                        </tspan>
                      </text>
                    );
                  }
                }}
              />
            </Pie>
          </PieChart>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}
